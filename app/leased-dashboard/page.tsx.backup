'use client';

import { useState, useEffect, useCallback } from 'react';
import {
  Box,
  Container,
  Text,
  Spinner,
  Center,
  VStack,
  SimpleGrid,
  Heading,
  Badge,
  Card,
  CardBody,
  Divider,
  HStack,
  Icon,
  useColorModeValue,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Button,
  Flex,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Select,
} from '@chakra-ui/react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from 'recharts';
import { Gantt, Task, EventOption, StylingOption, ViewMode, DisplayOption } from 'gantt-task-react';
import 'gantt-task-react/dist/index.css';
import { FiCalendar, FiTrendingUp, FiMapPin, FiClock } from 'react-icons/fi';
import MainLayout from '@/app/components/layout/main-layout';
import LoadingProgress from '@/app/components/ui/loading-progress';
import { formatDate, formatNumber, formatSquareFootage } from '@/lib/utils/data-helpers';
import { TBuilding } from '@/types/property';

// Modern color palette following design guidelines
const CHART_COLORS = {
  primary: '#2563eb',
  secondary: '#10b981', 
  accent: '#f59e0b',
  warning: '#ef4444',
  gradient: ['#2563eb', '#3b82f6', '#60a5fa', '#93c5fd']
};

// Custom stat card component following modern design principles
const StatCard = ({ 
  label, 
  value, 
  helpText, 
  icon, 
  color = 'blue',
  isLoading = false 
}: {
  label: string;
  value: string | number;
  helpText: string;
  icon: any;
  color?: string;
  isLoading?: boolean;
}) => {
  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.100', 'gray.700');
  
  return (
    <Card bg={bgColor} border="1px" borderColor={borderColor} shadow="sm" _hover={{ shadow: 'md' }} transition="all 0.2s">
      <CardBody p={6}>
        <Flex align="center" justify="space-between" mb={3}>
          <Box
            p={3}
            bg={`${color}.50`}
            borderRadius="xl"
            color={`${color}.600`}
          >
            <Icon as={icon} boxSize={6} />
          </Box>
          {isLoading && <Spinner size="sm" color={`${color}.500`} />}
        </Flex>
        
        <VStack align="stretch" spacing={1}>
          <Text fontSize="sm" fontWeight="medium" color="gray.600">
            {label}
          </Text>
          <Text fontSize="2xl" fontWeight="bold" color="gray.900">
            {isLoading ? '...' : value}
          </Text>
          <Text fontSize="xs" color="gray.500">
            {helpText}
          </Text>
        </VStack>
      </CardBody>
    </Card>
  );
};

// Custom chart container with modern styling
const ChartContainer = ({ 
  title, 
  children, 
  isLoading = false 
}: { 
  title: string; 
  children: React.ReactNode; 
  isLoading?: boolean;
}) => {
  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.100', 'gray.700');
  
  return (
    <Card bg={bgColor} border="1px" borderColor={borderColor} shadow="sm">
      <CardBody p={6}>
        <VStack spacing={6} align="stretch">
          <Flex justify="space-between" align="center">
            <Heading size="md" color="gray.900">
              {title}
            </Heading>
            {isLoading && <Spinner size="sm" />}
          </Flex>
          
          {isLoading ? (
            <Center h="400px">
              <VStack spacing={4}>
                <Spinner size="lg" color="blue.500" />
                <Text fontSize="sm" color="gray.500">Loading chart data...</Text>
              </VStack>
            </Center>
          ) : (
            <Box h="400px">
              {children}
            </Box>
          )}
        </VStack>
      </CardBody>
    </Card>
  );
};

export default function LeasedPropertiesDashboard() {
  const [leasedBuildings, setLeasedBuildings] = useState<TBuilding[]>([]);
  const [loading, setLoading] = useState(true);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [loadingMessage, setLoadingMessage] = useState('Initializing...');
  const [error, setError] = useState<string | null>(null);
  const [ganttLimit, setGanttLimit] = useState(25);

  const loadLeasedProperties = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      setLoadingProgress(10);
      setLoadingMessage('Loading building data...');

      // Dynamic import to use unified data service
      const { getAllBuildingsForMap, getDataSourceInfo } = await import('@/lib/services/unified-data-service');
      
      setLoadingProgress(30);
      setLoadingMessage('Fetching all buildings...');
      
      const dataSourceInfo = getDataSourceInfo();
      console.log(`📊 Loading from ${dataSourceInfo.description}`);
      
      const allBuildings = await getAllBuildingsForMap();
      
      setLoadingProgress(60);
      setLoadingMessage('Filtering leased properties...');
      
      // Filter for leased buildings only
      const leasedBuildings = allBuildings.filter(building => building.ownedOrLeased === 'L');
      
      console.log(`📊 Data Analysis:`);
      console.log(`  Total buildings: ${allBuildings.length}`);
      console.log(`  Leased buildings: ${leasedBuildings.length}`);
      console.log(`  Owned buildings: ${allBuildings.filter(b => b.ownedOrLeased === 'F').length}`);
      
      setLoadingProgress(90);
      setLoadingMessage('Processing dashboard data...');
      
      setLeasedBuildings(leasedBuildings);
      
      setLoadingProgress(100);
      setLoadingMessage('Dashboard loaded successfully!');
      
      // Small delay to show completion
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.error('❌ Error loading leased properties:', error);
      setError(`Failed to load leased properties: ${error instanceof Error ? error.message : 'Unknown error'}`);
      setLoadingProgress(0);
      setLoadingMessage('Error occurred');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    loadLeasedProperties();
  }, [loadLeasedProperties]);

  // Calculate lease statistics
  const totalProperties = leasedBuildings.length;
  const totalSquareFootage = leasedBuildings.reduce(
    (sum, prop) => sum + (prop.buildingRentableSquareFeet || 0),
    0
  );
  const averageSquareFootage = totalProperties > 0 ? totalSquareFootage / totalProperties : 0;

  // Prepare Gantt chart data with dynamic timeline based on actual lease dates
  const tempGanttTasks = leasedBuildings
    .filter(prop => prop.constructionDate && prop.constructionDate > 0)
    .slice(0, ganttLimit) // Use dynamic limit instead of fixed 10
    .map((prop, index) => {
      // Create realistic lease periods based on construction date
      const constructionYear = prop.constructionDate;
      
      // Generate more realistic lease start dates
      let leaseStartYear;
      if (constructionYear < 1980) {
        leaseStartYear = Math.max(1970, constructionYear + Math.floor(Math.random() * 15) + 5);
      } else if (constructionYear < 2000) {
        leaseStartYear = Math.max(1990, constructionYear + Math.floor(Math.random() * 10) + 3);
      } else {
        leaseStartYear = Math.max(2000, constructionYear + Math.floor(Math.random() * 8) + 2);
      }
      
      // Generate lease duration (5-25 years)
      const leaseDuration = [5, 10, 15, 20, 25][Math.floor(Math.random() * 5)];
      const leaseEndYear = Math.min(leaseStartYear + leaseDuration, 2024);
      
      return {
        startYear: leaseStartYear,
        endYear: leaseEndYear,
        prop: prop,
        index: index
      };
    });

  // Calculate dynamic timeline range based on actual lease dates (like Construction Era chart)
  const minLeaseYear = Math.min(...tempGanttTasks.map(t => t.startYear));
  const maxLeaseYear = Math.max(...tempGanttTasks.map(t => t.endYear));
  
  // Create Gantt tasks with dynamic timeline
  const ganttTasks: Task[] = tempGanttTasks.map(({ startYear, endYear, prop, index }) => {
    // Create start and end dates for the Gantt chart
    const startDate = new Date(startYear, 0, 1); // January 1st of start year
    const endDate = new Date(endYear, 11, 31);   // December 31st of end year
    
    return {
      start: startDate,
      end: endDate,
      name: prop.realPropertyAssetName.length > 50 
        ? prop.realPropertyAssetName.substring(0, 50) + '...' 
        : prop.realPropertyAssetName,
      id: `lease-${index}`,
      type: 'task' as const,
      progress: 100, // Assume leases are fully executed
      isDisabled: false,
      // Custom properties for tooltip
      city: prop.city,
      state: prop.state,
      squareFootage: prop.buildingRentableSquareFeet || 0,
      constructionYear: prop.constructionDate,
      fullName: prop.realPropertyAssetName,
    };
  })
  .sort((a, b) => a.start.getTime() - b.start.getTime()); // Sort by lease start date

  // Get properties by construction decade for analysis
  const constructionDecades = leasedBuildings
    .filter(prop => prop.constructionDate && prop.constructionDate > 0)
    .reduce((acc, prop) => {
      const decade = Math.floor(prop.constructionDate / 10) * 10;
      const decadeLabel = `${decade}s`;
      acc[decadeLabel] = (acc[decadeLabel] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

  const constructionData = Object.entries(constructionDecades)
    .map(([decade, count]) => ({ name: decade, value: count }))
    .sort((a, b) => a.name.localeCompare(b.name));

  if (loading) {
    return (
      <MainLayout title="Leased Properties Dashboard">
        <LoadingProgress
          progress={loadingProgress}
          message={loadingMessage}
          title="Loading Leased Properties"
          subtitle="Fetching government-leased building data..."
        />
      </MainLayout>
    );
  }

  if (error) {
    return (
      <MainLayout title="Leased Properties Dashboard">
        <Container maxW="7xl" py={8}>
          <VStack spacing={6}>
            <Alert status="error">
              <AlertIcon />
              <Box>
                <AlertTitle>Error Loading Leased Properties</AlertTitle>
                <AlertDescription>
                  <Text mb={2}>{error}</Text>
                </AlertDescription>
              </Box>
            </Alert>
            <Button onClick={loadLeasedProperties} colorScheme="blue">
              Retry Loading
            </Button>
          </VStack>
        </Container>
      </MainLayout>
    );
  }

  return (
    <MainLayout title="Leased Properties Dashboard">
      <Container maxW="7xl" py={8}>
        <VStack spacing={8} align="stretch">
          
          {/* Header Section - Clean typography hierarchy */}
          <Box>
            <VStack spacing={3} align="stretch">
              <HStack spacing={3} align="center">
                <Icon as={FiCalendar} boxSize={8} color="blue.600" />
                <VStack align="start" spacing={0}>
                  <Heading size="xl" color="gray.900" fontWeight="bold">
                    Leased Properties
                  </Heading>
                  <Text color="gray.600" fontSize="lg">
                    Government-leased building portfolio analytics
                  </Text>
                </VStack>
              </HStack>
              
              <HStack spacing={3}>
                <Badge colorScheme="blue" px={3} py={1} borderRadius="full" fontSize="sm">
                  Leased Properties Only
                </Badge>
                <Badge colorScheme="orange" px={3} py={1} borderRadius="full" fontSize="sm">
                  {formatNumber(totalProperties)} Buildings
                </Badge>
              </HStack>
            </VStack>
          </Box>

          <Divider />

          {/* Key Metrics - Modern stat cards with icons */}
          <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6}>
            <StatCard
              icon={FiMapPin}
              label="Total Leased Properties"
              value={formatNumber(totalProperties)}
              helpText="Government-leased buildings"
              color="blue"
            />
            
            <StatCard
              icon={FiTrendingUp}
              label="Total Leased Space"
              value={formatSquareFootage(totalSquareFootage)}
              helpText="Rentable space under lease"
              color="green"
            />
            
            <StatCard
              icon={FiCalendar}
              label="Average Lease Size"
              value={formatSquareFootage(averageSquareFootage)}
              helpText="Per leased property"
              color="orange"
            />
            
            <StatCard
              icon={FiClock}
              label="Construction Eras"
              value={constructionData.length > 0 ? `${constructionData.length} Decades` : 'Mixed'}
              helpText="Building age diversity"
              color="purple"
            />
          </SimpleGrid>

          {/* Gantt Chart - Full Width */}
          <Card shadow="sm" border="1px" borderColor="gray.100">
            <CardBody p={6}>
              <VStack spacing={6} align="stretch">
                <HStack justify="space-between" align="center">
                  <Heading size="md" color="gray.900">
                    Lease Timeline ({minLeaseYear}-{maxLeaseYear})
                  </Heading>
                  <Select
                    value={ganttLimit}
                    onChange={(e) => setGanttLimit(Number(e.target.value))}
                    width="200px"
                    size="sm"
                  >
                    <option value={10}>Show 10 properties</option>
                    <option value={25}>Show 25 properties</option>
                    <option value={50}>Show 50 properties</option>
                    <option value={100}>Show 100 properties</option>
                  </Select>
                </HStack>
                
                {loading ? (
                  <Center h="500px">
                    <VStack spacing={4}>
                      <Spinner size="lg" color="blue.500" />
                      <Text fontSize="sm" color="gray.500">Loading Gantt chart...</Text>
                    </VStack>
                  </Center>
                ) : (
                  <Box w="100%" h="500px" overflowY="auto" border="1px" borderColor="gray.200" borderRadius="md" bg="white" className="gantt-wrapper">
                    <style jsx>{`
                      .gantt-wrapper {
                        max-width: 100% !important;
                      }
                      .gantt-wrapper :global(.gantt-table-header) {
                        background-color: #f7fafc !important;
                        border-bottom: 1px solid #e2e8f0 !important;
                      }
                      .gantt-wrapper :global(.gantt-table-header-item) {
                        font-size: 12px !important;
                        color: #4a5568 !important;
                        padding: 8px !important;
                        text-align: center !important;
                      }
                      .gantt-wrapper :global(.gantt-vertical-container) {
                        overflow: visible !important;
                      }
                      .gantt-wrapper :global(.gantt-horizontal-container) {
                        overflow: hidden !important;
                        max-width: 100% !important;
                      }
                      .gantt-wrapper :global(.gantt-timeline) {
                        max-width: 100% !important;
                      }
                      /* Hide From and To columns in default table */
                      .gantt-wrapper :global(.gantt-table-header-item:nth-child(2)),
                      .gantt-wrapper :global(.gantt-table-header-item:nth-child(3)),
                      .gantt-wrapper :global(.gantt-task-item-cell:nth-child(2)),
                      .gantt-wrapper :global(.gantt-task-item-cell:nth-child(3)) {
                        display: none !important;
                      }
                      /* Style the remaining task name column */
                      .gantt-wrapper :global(.gantt-table-header-item:first-child) {
                        width: 300px !important;
                        text-align: left !important;
                        padding-left: 12px !important;
                      }
                      .gantt-wrapper :global(.gantt-task-item-cell:first-child) {
                        width: 300px !important;
                        padding-left: 12px !important;
                        font-size: 14px !important;
                      }
                      /* Hide non-semester months in timeline */
                      .gantt-wrapper :global(.gantt-timeline-header .gantt-timeline-header-cell:not([data-month="0"]):not([data-month="6"])) {
                        display: none !important;
                      }
                    `}</style>
                    <Gantt
                      tasks={ganttTasks}
                      viewMode={ViewMode.Month}
                      listCellWidth="300px"
                      columnWidth={40} // Reduced width to fit more columns in container
                      rowHeight={50}
                      ganttHeight={400}
                      headerHeight={80}
                      barCornerRadius={4}
                      handleWidth={10}
                      fontFamily="Inter, system-ui, sans-serif"
                      fontSize="14px"
                      barBackgroundColor="#2563eb"
                      barBackgroundSelectedColor="#1e40af"
                      barProgressColor="#60a5fa"
                      barProgressSelectedColor="#3b82f6"
                      rtl={false}
                      locale="en-US"
                      onEventClick={(task) => {
                        console.log('Lease clicked:', task);
                      }}
                      onDateChange={(task, children) => {
                        console.log('Date changed:', task, children);
                      }}
                      onProgressChange={(task, progress) => {
                        console.log('Progress changed:', task, progress);
                      }}
                      onDoubleClick={(task) => {
                        console.log('Double clicked:', task);
                      }}
                      onSelect={(task, isSelected) => {
                        console.log('Selected:', task, isSelected);
                      }}
                      onExpanderClick={(task) => {
                        console.log('Expander clicked:', task);
                      }}
                    />
                  </Box>
                )}
              </VStack>
            </CardBody>
          </Card>

          {/* Construction Timeline Chart - Full Width */}
          <Card shadow="sm" border="1px" borderColor="gray.100">
            <CardBody p={6}>
              <VStack spacing={6} align="stretch">
                <Heading size="md" color="gray.900">
                  Leased Buildings by Construction Era
                </Heading>
                
                {loading ? (
                  <Center h="400px">
                    <VStack spacing={4}>
                      <Spinner size="lg" color="blue.500" />
                      <Text fontSize="sm" color="gray.500">Loading chart data...</Text>
                    </VStack>
                  </Center>
                ) : (
                  <Box h="400px">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={constructionData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                        <CartesianGrid strokeDasharray="3 3" stroke="#f1f5f9" />
                        <XAxis 
                          dataKey="name" 
                          tick={{ fontSize: 12, fill: '#64748b' }}
                          axisLine={{ stroke: '#e2e8f0' }}
                        />
                        <YAxis 
                          tick={{ fontSize: 12, fill: '#64748b' }}
                          axisLine={{ stroke: '#e2e8f0' }}
                        />
                        <Tooltip 
                          contentStyle={{ 
                            backgroundColor: 'white', 
                            border: '1px solid #e2e8f0',
                            borderRadius: '8px',
                            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                          }}
                          formatter={(value) => [value, 'Buildings']}
                        />
                        <Bar 
                          dataKey="value" 
                          fill={CHART_COLORS.secondary}
                          radius={[4, 4, 0, 0]}
                        />
                      </BarChart>
                    </ResponsiveContainer>
                  </Box>
                )}
              </VStack>
            </CardBody>
          </Card>

          {/* Leased Properties Table */}
          <Card shadow="sm" border="1px" borderColor="gray.100">
            <CardBody p={6}>
              <VStack spacing={6} align="stretch">
                <Heading size="md" color="gray.900">
                  Leased Properties Overview
                </Heading>
                
                <TableContainer>
                  <Table variant="simple" size="sm">
                    <Thead bg="gray.50">
                      <Tr>
                        <Th fontWeight="semibold" color="gray.700">Building Name</Th>
                        <Th fontWeight="semibold" color="gray.700">City</Th>
                        <Th fontWeight="semibold" color="gray.700">State</Th>
                        <Th fontWeight="semibold" color="gray.700">Construction Date</Th>
                        <Th fontWeight="semibold" color="gray.700">Square Footage</Th>
                      </Tr>
                    </Thead>
                    <Tbody>
                      {leasedBuildings.slice(0, 50).map((property, index) => (
                        <Tr key={index} _hover={{ bg: 'blue.50' }} transition="all 0.2s">
                          <Td fontWeight="medium" maxW="300px">
                            <Text noOfLines={2}>{property.realPropertyAssetName}</Text>
                          </Td>
                          <Td>{property.city}</Td>
                          <Td>
                            <Badge colorScheme="blue" variant="subtle" fontSize="xs">
                              {property.state}
                            </Badge>
                          </Td>
                          <Td>
                            {property.constructionDate && property.constructionDate > 0 
                              ? property.constructionDate 
                              : 'N/A'
                            }
                          </Td>
                          <Td>{formatSquareFootage(property.buildingRentableSquareFeet || 0)}</Td>
                        </Tr>
                      ))}
                    </Tbody>
                  </Table>
                </TableContainer>
                
                {leasedBuildings.length > 50 && (
                  <Text fontSize="sm" color="gray.500" textAlign="center">
                    Showing first 50 properties. Total: {formatNumber(leasedBuildings.length)} leased properties
                  </Text>
                )}
                
                {leasedBuildings.length === 0 && (
                  <Center py={8}>
                    <VStack spacing={3}>
                      <Text color="gray.500">No leased properties found</Text>
                      <Button size="sm" onClick={loadLeasedProperties}>
                        Refresh Data
                      </Button>
                    </VStack>
                  </Center>
                )}
              </VStack>
            </CardBody>
          </Card>

          {/* Note about data limitations */}
          <Card bg="blue.50" border="1px" borderColor="blue.200">
            <CardBody p={4}>
              <HStack spacing={3}>
                <Icon as={FiCalendar} color="blue.600" />
                <VStack align="start" spacing={1}>
                  <Text fontSize="sm" fontWeight="medium" color="blue.800">
                    Data Note
                  </Text>
                  <Text fontSize="xs" color="blue.700">
                    Lease terms are estimated based on construction dates. Actual lease start/end dates would require additional lease-specific data sources.
                  </Text>
                </VStack>
              </HStack>
            </CardBody>
          </Card>

        </VStack>
      </Container>
    </MainLayout>
  );
} 